version: '2.4'

services:
  # =========================
  # DATABASE LAYER
  # =========================
  mysql:
    image: mysql:8.0
    container_name: demo-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: demo_db
      MYSQL_USER: demo_user
      MYSQL_PASSWORD: demo_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - demo-network
    mem_limit: 2g # RAM tối đa 1GB
    memswap_limit: 2g # Không cho dùng swap
    cpus: 2 # Tối đa 1.5 CPU core
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: demo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 50mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - demo-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 5s
      retries: 5
    mem_limit: 512m
    cpus: 0.5

  redisinsight:
    image: redis/redisinsight:latest
    container_name: demo-redisinsight
    restart: unless-stopped
    ports:
      - "9001:5540"
    volumes:
      - redisinsight_data:/data
    depends_on:
      - redis
    networks:
      - demo-network
    mem_limit: 512m
    cpus: 0.5

  # =========================
  # APPLICATION LAYER
  # =========================
  app:
    build: .
    container_name: demo-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/demo_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: demo_user
      SPRING_DATASOURCE_PASSWORD: demo_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS: always
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 5000
    depends_on:
      mysql:
        condition: service_healthy
      logstash:
        condition: service_started
    networks:
      - demo-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    mem_limit: 2g
    cpus: 2

  # =========================
  # MONITORING
  # =========================
  prometheus:
    image: prom/prometheus:latest
    container_name: demo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - app
      - redis-exporter
      - mysqld-exporter
      - node-exporter
      - cadvisor
    networks:
      - demo-network
    mem_limit: 1g
    cpus: 1

  grafana:
    image: grafana/grafana:latest
    container_name: demo-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - demo-network
    mem_limit: 512m
    cpus: 0.5

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - demo-network

  mysqld-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-exporter
    restart: unless-stopped
    ports:
      - "9104:9104"
    depends_on:
      - mysql
    volumes:
      - ./exporter-my.cnf:/etc/mysql/my.cnf:ro
    command:
      - "--config.my-cnf=/etc/mysql/my.cnf"
      - "--collect.global_status"
      - "--collect.global_variables"
      - "--collect.engine_innodb_status"
      - "--collect.info_schema.tables"
      - "--collect.info_schema.tablestats"
      - "--collect.info_schema.innodb_metrics"
      - "--collect.perf_schema.eventsstatements"
      - "--collect.perf_schema.eventsstatements_digest_text_limit=120"
      - "--collect.perf_schema.file_events"
      - "--collect.perf_schema.file_instances"
      - "--collect.perf_schema.indexiowaits"
      - "--collect.perf_schema.tableiowaits"
      - "--collect.perf_schema.tablelocks"
    networks:
      - demo-network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
    depends_on:
      - redis
    networks:
      - demo-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    networks:
      - demo-network
  # =========================
  # LOGGING STACK (ELK)
  # =========================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - demo-network
    mem_limit: 2g
    cpus: 2

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.22
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - demo-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.22
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - demo-network

  # =========================
  # NGROK (Expose Public)
  # =========================
  ngrok:
    image: ngrok/ngrok:latest
    container_name: demo-ngrok
    restart: unless-stopped
    volumes:
      - ./ngrok.yml:/etc/ngrok/ngrok.yml:ro
    command: start --all --config /etc/ngrok/ngrok.yml
    depends_on:
      - app
      - grafana
      - kibana
    ports:
      - "4040:4040"
    networks:
      - demo-network

# =========================
# VOLUMES & NETWORKS
# =========================
volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:
  redisinsight_data:
  es_data:
  clickhouse_data:

networks:
  demo-network:
    driver: bridge

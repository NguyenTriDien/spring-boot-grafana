#  version: '3.8'
#
#  services:
#    # MySQL Database
#    mysql:
#      image: mysql:8.0
#      container_name: demo-mysql
#      restart: unless-stopped
#      environment:
#        MYSQL_ROOT_PASSWORD: rootpassword
#        MYSQL_DATABASE: demo_db
#        MYSQL_USER: demo_user
#        MYSQL_PASSWORD: demo_password
#      ports:
#        - "3306:3306"
#      volumes:
#        - mysql_data:/var/lib/mysql
#        - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
#      networks:
#        - demo-network
#      healthcheck:
#        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
#        timeout: 20s
#        retries: 10
#
#    # Spring Boot Application
#    app:
#      build: .
#      container_name: demo-app
#      restart: unless-stopped
#      ports:
#        - "8080:8080"
#      environment:
#        SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/demo_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#        SPRING_DATASOURCE_USERNAME: demo_user
#        SPRING_DATASOURCE_PASSWORD: demo_password
#        SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
#        SPRING_JPA_HIBERNATE_DDL_AUTO: update
#        SPRING_JPA_SHOW_SQL: true
#        SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
#        MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
#        MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS: always
#      depends_on:
#        mysql:
#          condition: service_healthy
#      networks:
#        - demo-network
#      healthcheck:
#        test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#        interval: 30s
#        timeout: 10s
#        retries: 3
#        start_period: 60s
#
#    # Prometheus
#    prometheus:
#      image: prom/prometheus:latest
#      container_name: demo-prometheus
#      restart: unless-stopped
#      ports:
#        - "9090:9090"
#      volumes:
#        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#        - prometheus_data:/prometheus
#      command:
#        - '--config.file=/etc/prometheus/prometheus.yml'
#        - '--storage.tsdb.path=/prometheus'
#        - '--web.console.libraries=/etc/prometheus/console_libraries'
#        - '--web.console.templates=/etc/prometheus/consoles'
#        - '--storage.tsdb.retention.time=200h'
#        - '--web.enable-lifecycle'
#      depends_on:
#        - app
#      networks:
#        - demo-network
#
#    # Grafana
#    grafana:
#      image: grafana/grafana:latest
#      container_name: demo-grafana
#      restart: unless-stopped
#      ports:
#        - "3000:3000"
#      environment:
#        GF_SECURITY_ADMIN_USER: admin
#        GF_SECURITY_ADMIN_PASSWORD: admin123
#        GF_USERS_ALLOW_SIGN_UP: false
#      volumes:
#        - grafana_data:/var/lib/grafana
#        - ./grafana/provisioning:/etc/grafana/provisioning
#        - ./grafana/dashboards:/var/lib/grafana/dashboards
#      depends_on:
#        - prometheus
#      networks:
#        - demo-network
#  volumes:
#    mysql_data:
#      driver: local
#    prometheus_data:
#      driver: local
#    grafana_data:
#      driver: local
#
#  networks:
#    demo-network:
#      driver: bridge
